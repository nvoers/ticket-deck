generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id
  firstName         String?
  lastName          String?
  username          String       @unique
  profileImageUrl   String?
  role              UserRole     @default(USER)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  friendFriendships Friendship[] @relation("friendFriendships")
  userFriendships   Friendship[] @relation("userFriendships")
}

enum UserRole {
  USER
  ADMIN
}

model Ticket {
  id     String   @id @default(cuid())
  name   String
  /// @encrypted
  code   String
  date   DateTime
  userId String?
}

model Friendship {
  id         String           @id @default(cuid())
  userId     String
  friendId   String
  status     FriendshipStatus @default(ACCEPTED)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  friend     User             @relation("friendFriendships", fields: [friendId], references: [id])
  user       User             @relation("userFriendships", fields: [userId], references: [id])

  @@unique([userId, friendId], name: "unique_friendship")
  @@unique([friendId, userId], name: "unique_friendship_inverse")
}

model FriendshipRequest {
  id         String           @id @default(cuid())
  userId     String
  friendId   String
  status     FriendshipStatus @default(REQUESTED)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@unique([userId, friendId], name: "unique_friendship_request")
  @@unique([friendId, userId], name: "unique_friendship_request_inverse")
}

enum FriendshipStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}
